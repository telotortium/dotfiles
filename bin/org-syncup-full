#!/usr/bin/env bash
set -e

( getopt --version | grep -e 'getopt (enhanced)' -e 'util-linux' ) &>/dev/null || {
  echo "GNU getopt not on path" 1>&2
  exit 1
}
options=$(getopt -o gnP -- "$@")
eval set -- "$options"
no_prompt=0
no_push=0
no_dropbox_mode=0
while true; do
    case "$1" in
    -n)
        no_prompt=1
        ;;
    -P)
        no_push=1
        ;;
    -g)
        no_dropbox_mode=1
        ;;
    --)
        shift
        break
        ;;
    esac
    shift
done


# Does tty exist? Needed for stty.
tty_exists () {
    /usr/bin/tty &>/dev/null
}

# Reset terminal echo state after a `read` call
stty_echo () {
    tty_exists || return 0;
    stty echo </dev/tty &>/dev/null || true
    echo
}
trap 'stty_echo' EXIT

sync_orgzly_prompt () {
    tty_exists || return 0;
    echo
    echo '========================================'
    echo '       Sync Orgzly on device now        '
    echo '========================================'
    echo
    echo 'Press any key to continue...'
    (
        # shellcheck disable=SC2064
        trap "stty $(stty -g;stty -icanon)" EXIT
        stty -echo
        LC_ALL=C dd bs=1 count=1 >/dev/null 2>&1
    )   </dev/tty
}

# The documentation for `org-revert-all-org-buffers' says this:
#
# This function is useful in a setup where one tracks Org files
# with a version control system, to revert on one machine after pulling
# changes from another.  I believe the procedure must be like this:
#
# 1. M-x org-save-all-org-buffers
# 2. Pull changes from the other machine, resolve conflicts
# 3. M-x org-revert-all-org-buffers
#
# I've decided to start reverting from this script because I no longer use
# auto-revert-mode (see
# https://www.gnu.org/software/emacs/manual/html_node/emacs/Reverting.html).
revert_all_org_buffers () {
    # Revert Org buffers to reload them from the file. Use `cl-letf` to disable
    # `yes-or-no-p` prompt, and disable output, which seems to print
    # `org-id-locations` for some reason, and so produces very long output.
    for (( i=0; i < "${#org_repos_local[@]}"; i++ )); do
        repo="${org_repos_local[$i]}"
        cd "$HOME/Documents/org/$repo"
        if type -p git-restore-mtime &>/dev/null; then
            echo "Running git-restore-mtime..." 1>&2
            git-restore-mtime
        fi
        tmp=$(mktemp)
        git diff -z --name-only "${org_repos_orig_commits[$i]}" HEAD | \
            xargs -0 printf "$(pwd | sed 's/%/%%/g')/%s\n" >"$tmp"
        if ! "$EMACSCLIENT" --eval '
            (with-current-buffer (find-file-noselect "'"$tmp"'")
              (require (quote s))
              (unwind-protect
                (progn
                  (goto-char (point-min))
                  (while (not (eobp))
                    (let* ((line (buffer-substring
                                   (point)
                                   (progn (forward-line 1) (point))))
                           (file (s-chomp line)))
                      (with-current-buffer (find-file-noselect file)
                        (revert-buffer t t)))))
                (kill-current-buffer)))'; then
            rv=$?
            echo "Failed to connect to Emacs daemon. If Emacs isn't open, run" \
                "\`emacs --daemon\` and try again. Otherwise, run M-x" \
                "server-force-delete followed by M-x server-start and try again."
            exit $rv
        fi
        rm -f "$tmp"
    done
}

read -r -a org_repos_local <<<"$ORG_REPOS"
org_repos_orig_commits=()
for repo in "${org_repos_local[@]}"; do
    cd "$HOME/Documents/org/$repo"
    org_repos_orig_commits+=("$(git rev-parse HEAD)")
done


# Save all Org mode buffers. This will minimize the chance of conflicts between
# the local version and remote version of the files.
EMACSCLIENT=${EMACSCLIENT:-emacsclient}
unset ALTERNATE_EDITOR  # Don't fall back to non-Emacs editor
if ! "$EMACSCLIENT" --eval '(org-save-all-org-buffers)'; then
    echo "Failed to connect to Emacs daemon. If Emacs isn't open, run" \
        "\`emacs --daemon\` and try again. Otherwise, run M-x" \
        "server-force-delete followed by M-x server-start and try again."
    exit 1
fi

org-git-sync
org-bad-branch || {
    for repo in "${org_repos_local[@]}"; do
        cd "$HOME/Documents/org/$repo"
        git md-tmp-branches || exit $?
    done
}
[[ "$no_push" -eq 1 ]] || org-git-push

if [[ "$no_dropbox_mode" -ne 1 ]]; then
    [[ "$no_prompt" -ne 1 ]] && sync_orgzly_prompt

    home-org-sync-dropbox -n
    cd ~/Documents/org/home-org
    git push

    tiktok-org-sync-dropbox -n
    cd ~/Documents/org/tiktok-org
    git push

    [[ "$no_prompt" -ne 1 ]] && sync_orgzly_prompt
fi

echo "Reverting all Org buffers - may take a while..."
revert_all_org_buffers  # Revert after each pull.
echo "Reverting complete"
#
#
