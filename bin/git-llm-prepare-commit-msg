#!/bin/bash
# Git `prepare-commit-msg` hook script to generate commit messages using LLM.
# Based on https://harper.blog/2024/03/11/use-an-llm-to-automagically-generate-meaningful-git-commit-messages/

# Exit if the `SKIP_LLM_GITHOOK` environment variable is set
if [ -n "$SKIP_LLM_GITHOOK" ]; then
  exit 0
fi

# ANSI color codes for styling the output
RED='\033[0;31m'    # Red for errors
GREEN='\033[0;32m'  # Green for success messages
YELLOW='\033[0;33m' # Yellow for warnings/info
BLUE='\033[0;34m'   # Blue for headings
NC='\033[0m'        # Reset to no color

# Function to display a spinning animation during LLM processing
spin_animation() {
  spinner=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  while true; do
    for i in "${spinner[@]}"; do
      tput civis  # Hide the cursor
      tput el1    # Clear line from cursor to beginning
      printf "\\r${YELLOW}%s${NC} Generating LLM commit message..." "$i"
      sleep 0.1
      tput cub 32  # Move the cursor back 32 columns
    done
  done
}

# Exit if this is a merge commit (indicated by a second argument)
if [ -n "$2" ]; then
  exit 0
fi

# Ensure the `llm` command is installed
if ! command -v llm &> /dev/null; then
  echo "${RED}Error: 'llm' command is not installed. Please install it (using \`uv tool install llm\`) and try again.${NC}"
  exit 1
fi
# Ensure the `files-to-prompt` command is installed
if ! command -v files-to-prompt &> /dev/null; then
  echo "${RED}Error: 'files-to-prompt' command is not installed. Please install it (using \`uv tool install files-to-prompt\`) and try again.${NC}"
  exit 1
fi

# Start the spinning animation in the background
spin_animation &
spin_pid=$!

# === Build the Enhanced User Prompt for the LLM ===

# 1. Get the current staged diff.
current_diff=$(git diff -U999999 --cached)

# 2. Get the merge base between master and HEAD, and list files affected by recent commits.
merge_base=$(git merge-base master HEAD)
commit_range="${merge_base}..HEAD^"
# List unique files changed in commits from commit_range, filtering to only commits from the past 2 weeks.
recent_files_prompt=$(
  : Generate list of recent_files; \
  git log --since="2 weeks ago" --name-only --pretty=format:"" -z "$commit_range" | sort -uz | \
  xargs -0 files-to-prompt
)
recent_files_prompt=$(files-to-prompt $recent_files)

# Combine the parts into a composite prompt with clear separators.
user_prompt=$(printf "==== Git Diff (staged changes) ====\n%s\n\n==== Affected Files (recent commits from master to HEAD^) ====\n%s\n" \
  "$current_diff" "$recent_files_prompt")

# System prompt based on
# https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53.
system_prompt=$(printf '%s' 'Write a commit message following the Linux kernel guidelines:

## Commit Message Guidelines

> Short (72 chars or less) summary
>
> More detailed explanatory text. Do not wrap the text. The blank
> line separating the summary from the body is critical (unless you omit
> the body entirely).
>
> Write your commit message in the imperative: "Fix bug" and not "Fixed
> bug" or "Fixes bug." This convention matches up with commit messages
> generated by commands like git merge and git revert.
>
> Further paragraphs come after blank lines.
>
> - Bullet points are okay, too.
> - Typically a hyphen or asterisk is used for the bullet, followed by a
>   single space. Use a hanging indent.

### Example for a commit message

> Add CPU arch filter scheduler support
>
> In a mixed environment of…

### A properly formed git commit subject line should always be able to complete the following sentence
If applied, this commit will *\<your subject line here\>*

### Rules for a great git commit message style
* Separate subject from body with a blank line
* Do not end the subject line with a period
* Capitalize the subject line and each paragraph
* Use the imperative mood in the subject line
* Wrap lines at 72 characters
* Use the body to explain what and why you have done something. In most cases, you can leave out details about how a change has been made.

### Information in commit messages
* Describe why a change is being made.
* How does it address the issue?
* What effects does the patch have?
* Do not assume the reviewer understands what the original problem was.
* Do not assume the code is self-evident/self-documenting.
* Read the commit message to see if it hints at improved code structure.
* The first commit line is the most important.
* Describe any limitations of the current code.
* Do not include patch set-specific comments.

Details for each point and good commit message examples can be found on https://wiki.openstack.org/wiki/GitCommitMessages#Information_in_commit_messages

### Other concerns

* If there are no changes, or the input is blank - then return a blank string
* DO NOT include leading "> " when generating commit messages.
* The "Git Diff (staged changes)" section is the most important. The actual diffs (lines starting with "+" or "-" is most important, but do not ignore the context).
* The "Affected Files (recent commits from master to HEAD^)" section is less important, but may provide useful context for commits on top of branches with lots of existing commits.

Think carefully before you write your commit message.

What you write will be passed directly to git commit -m "[message]"
'
)

# Generate the commit message using the composite prompt.
if ! commit_msg=$(printf "%s" "$user_prompt" | llm -m gpt-4o -s "$system_prompt" 2>&1); then
  # Stop the spinner if llm fails.
  kill $spin_pid
  wait $spin_pid 2>/dev/null
  tput cnorm  # Show the cursor again
  printf "\\n"
  printf "${RED}Error: llm command failed to generate the commit message:\\n%s${NC}\\n\\nManually set the commit message" "$commit_msg"
  exit 1
fi

# Stop the spinning animation.
kill $spin_pid
wait $spin_pid 2>/dev/null
tput cnorm  # Restore the cursor
echo

# Display the generated commit message with colored headings.
echo -e "${BLUE}=== Generated Commit Message ===${NC}"
echo -e "${GREEN}$commit_msg${NC}"
echo -e "${BLUE}=================================${NC}"
echo

# Write the commit message to the file (usually the commit message file in .git).
echo "$commit_msg" > "$1"
