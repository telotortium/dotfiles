#!/usr/bin/env bash
# Add org file changes to the repository
ORG_REPOS=${ORG_REPOS?"no repos defined"}
GIT=${GIT:-git}

while getopts m: opt; do
    case "$opt" in
    m)
        commit_msg="$OPTARG" ;;
    *) ;;
    esac
done

for repo in $ORG_REPOS
do
    (
        set -eo pipefail
        maintree="$HOME/Documents/org/$repo"
        echo "$0: Processing $maintree" 1>&2
        cd "$maintree"
        # Remove deleted files
        "$GIT" ls-files --deleted -z | xargs -r -0 "$GIT" rm -q >/dev/null 2>&1
        # Add new files
        "$GIT" add . >/dev/null 2>&1
        status="$("$GIT" status --porcelain=v1 --untracked-files=no --ignored=no | cut -d ' ' -f 3-)"
        status_joined="$(printf '%s\n' "$status" | paste -sd ' ' -)"
        # If there is just one file being modified, use its name as the commit
        # message, no matter how long it is. Otherwise, put as many files in the
        # commit heading as will fit in 69 characters, and put all of them in
        # the body.
        if [[ -n "${commit_msg:-}" ]]; then
            msg="${commit_msg}"
        elif (( "$(printf '%s' "$status" | wc -l)" <= 1 )) || \
                (( "$(printf '%s' "$status_joined" | wc -c)" <= 72 )); then
            msg="$status_joined"
        else
            msg=$(printf '%69s...\n\n%s\n' "$status_joined" "$status")
        fi
        # Run pre-commit hook once to fix files, ignoring errors.
        if command -v pre-commit &>/dev/null && [ -r ".pre-commit-config.yaml" ]; then
            # Call the hook script because it filters out passed or skipped checks.
            "$("$GIT" rev-parse --git-dir)/hooks/pre-commit" || true
            "$GIT" add . &>/dev/null
        fi
        # Only commit if files have been added above
        [ -z "$status" ] || "$GIT" commit -q -m "$msg";
    )
done
