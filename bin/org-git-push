#!/usr/bin/env python3

"""Sync Org git repos with upstream.

Assumes that each directory in `~/Documents/org` listed in the environment variable
`ORG_REPOS` is a Git repo containing org-mode files.

Set the environment variable `GIT` to use a custom `git` executable (uses the
one on the path by default).
"""

import optparse
import os
from shlex import quote as q
import re
import shutil
import subprocess as sp
import sys
import tempfile

parser = optparse.OptionParser()
parser.add_option('--noninteractive', action='store_true', dest='noninteractive')
parser.add_option('--verbose', action='store_true', dest='verbose')
(options, args) = parser.parse_args()

base_tag = 'org-git-push-base'

org_repos = os.environ.get('ORG_REPOS', '').split()
if not org_repos:
    sys.exit("No repos defined");
git = os.environ.get('GIT', 'git')

ssh_git_args = [os.environ.get('GIT_SSH', 'ssh')]
if options.verbose:
    ssh_git_args.append('-vv')
if options.noninteractive:
    ssh_git_args.extend(['-o', 'BatchMode=yes'])
os.putenv('GIT_SSH_COMMAND', ' '.join(q(x) for x in ssh_git_args))

def log_and_run_cmd(cmd, verbose=False, check=True):
    if verbose:
        print(f"{sys.argv[0]}: Running cmd: {cmd}", file=sys.stderr)
    if check:
        sp.check_call(cmd, shell=True)
    else:
        sp.call(cmd, shell=True)

exit = 0
for repo in org_repos:
    maintree = os.path.join(os.environ['HOME'], 'Documents', 'org', repo)
    print(f"{sys.argv[0]}: Processing {maintree}", file=sys.stderr)
    try:
        start_branch = None
        os.chdir(maintree)
        # TODO: Do rebase in order to squash `--fixup`:
        # http://www.lowlevelmanager.com/2016/02/how-to-run-git-interactive-rebase-non.html
        start_branch = sp.check_output("git symbolic-ref --short HEAD", shell=True).strip().decode('utf-8')
        log_and_run_cmd(r"""GIT={} git fetch""".format(q(git)),
                        verbose=options.verbose)
        log_and_run_cmd(r"""GIT={} git tag --no-sign -m "ignore message" --force {} {}""".format(
            q(git), q(base_tag), q(start_branch)),
                        verbose=options.verbose,
        )
        try:
            log_and_run_cmd(r"""GIT={} bash -c '$GIT pull {} --rebase --autostash 2> \
                            >( grep -vF "Successfully rebased and updated refs/heads/$0" 1>&2)' {}""".format(
                                q(git),
                                '--verbose' if options.verbose else '--quiet',
                                q(start_branch),
                            ),
                            verbose=options.verbose)
            log_and_run_cmd(r"""GIT={} bash -c '$GIT md-tmp-branches'""".format(
                                q(git),
                            ),
                            verbose=options.verbose)
        except sp.CalledProcessError as e:
            if options.noninteractive:
                log_and_run_cmd("git rebase --abort",
                                verbose=options.verbose, check=False)
                log_and_run_cmd("git merge --abort",
                                verbose=options.verbose, check=False)
                exit = 1
                continue
            else:
                raise
        log_and_run_cmd(r"""GIT={git} bash -c '"$GIT" push {verbose} \
                        --force-with-lease="$0:$1" 2> \
                        >( grep -vF "Resolving deltas" 1>&2 )' {base} {current}""".format(
                            git=q(git),
                            verbose=('--verbose' if options.verbose else '--quiet'),
                            base=q(base_tag), current=q(start_branch),
                        ),
                        verbose=options.verbose)
        # Update current status of remote tracking branches after push
        log_and_run_cmd(r"""GIT={} git fetch""".format(q(git)),
                        verbose=options.verbose)
    except sp.CalledProcessError as e:
        print(e, file=sys.stderr)
        exit = 1
        continue
    finally:
        # If we're on a branch, it will return the branch name. Otherwise, this
        # will return HEAD. This is good for our purposes, because we are
        # trying to get back on `start_branch` regardless of whether we're on
        # a branch now or not.
        current_head = sp.check_output("git rev-parse --abbrev-ref HEAD", shell=True).strip()
        # Don't switch if either we never obtained a current branch name or
        # we're already on `start_branch` (the latter to avoid polluting the
        # reflog).
        if (start_branch is not None and current_head != start_branch):
            log_and_run_cmd(r"""GIT={} git checkout {}""".format(
                q(git), q(start_branch)), verbose=options.verbose, check=False)
sys.exit(exit)
