#!/usr/bin/env python

"""Sync Org git repos with upstream.

Assumes that each directory in `~/Documents/org` listed in the environment variable
`ORG_REPOS` is a Git repo containing org-mode files.

Set the environment variable `GIT` to use a custom `git` executable (uses the
one on the path by default).
"""

import optparse
import os
import pipes
import re
import shutil
import subprocess as sp
import sys
import tempfile

parser = optparse.OptionParser()
parser.add_option('--noninteractive', action='store_true', dest='noninteractive')
(options, args) = parser.parse_args()

org_repos = os.environ.get('ORG_REPOS', '').split()
if not org_repos:
    sys.exit("No repos defined");
git = os.environ.get('GIT', 'git')

exit = 0
for repo in org_repos:
    maintree = os.path.join(os.environ['HOME'], 'Documents', 'org', repo)
    print >>sys.stderr, "{}: Processing {}".format(sys.argv[0], maintree)
    try:
        os.chdir(maintree)
        try:
            sp.check_call(
                r"""GIT={} bash -c '$GIT pull --rebase --autostash -q 2> \
                >( sed "/Successfully rebased and updated refs\\/heads\\/master\\./d" 1>&2)'""".format(pipes.quote(git)),
                shell=True)
        except sp.CalledProcessError as e:
            if options.noninteractive:
                sp.call([git, "rebase", "--abort"])
                sp.call([git, "merge", "--abort"])
                exit = 1
                continue
            else:
                raise
        sp.check_call(r"""GIT={} bash -c '$GIT push -q --force-with-lease 2> \
                        >( sed "/Resolving deltas/d" 1>&2 )'""".format(pipes.quote(git)),
                      shell=True)
    except sp.CalledProcessError as e:
        print >>sys.stderr, e
        exit = 1
        continue
sys.exit(exit)
