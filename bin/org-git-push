#!/usr/bin/env python

"""Sync Org git repos with upstream.

Assumes that each directory in `~/Documents/org` listed in the environment variable
`ORG_REPOS` is a Git repo containing org-mode files.

Set the environment variable `GIT` to use a custom `git` executable (uses the
one on the path by default).
"""

import os
import pipes
import re
import subprocess as sp
import sys

org_repos = os.environ.get('ORG_REPOS', '').split()
if not org_repos:
    sys.exit("No repos defined");
git = os.environ.get('GIT', 'git')

exit = 0
for repo in org_repos:
    try:
        os.chdir(os.path.join(os.environ['HOME'], 'Documents', 'org', repo))
        oldbranch = sp.check_output(
                [git] + 'rev-parse --abbrev-ref HEAD'.split()
                ).strip()

        sp.check_call([git] + 'stash save -q'.split())
        ls = sp.check_output([git] + 'stash list'.split())
        try:
            stash = re.match('(.*?):', ls.splitlines()[0]).group(1)
        except (IndexError, AttributeError):
            stash = ''

        sp.check_call([git] + 'checkout master -q'.split())
        sp.check_call([git] + 'pull -q'.split())
        sp.check_call(r"""GIT={} bash -c '$GIT push -q 2> \
                        >( sed "/Resolving deltas/d" )'""".format(pipes.quote(git)),
                      shell=True)
        sp.check_call([git] + 'checkout -q'.split() + [oldbranch])
        if stash:
            sp.check_call([git] + 'stash pop -q'.split() + [stash])
    except sp.CalledProcessError as e:
        print >>sys.stderr, e
        exit = 1
        continue
sys.exit(exit)
