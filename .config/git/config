[alias]
        amend = commit --amend --reuse-message=HEAD
        ap = add -p
        # Bisect only merge commits:
        # https://interrupt.memfault.com/blog/git-bisect#choosing-the-correct-types-of-commits
        bisect-merge-bad-good = "!f() { \
            (( $# == 2 )) || { echo Usage: git bisect-merge-bad-good BAD GOOD; return 1; }; \
            for rev in $(git rev-list \"$1..$2\" --merges --first-parent); do \
                git rev-list \"$rev^2\" --not \"$rev^\"; \
            done | xargs git bisect skip; \
        }; f"
        branch-cleanup-deleted-remotes = "!f() { \
            set -xv; \
            current=$(git branch --show-current); \
            trap \"git checkout $current\" ERR EXIT; \
            for branch in $(git branch | grep -v '^ \\*'); do \
                set -e; \
                remote=$(git config --get --local \"branch.${branch}.remote\" 2>/dev/null) || continue; \
                if ! git ls-remote --exit-code --heads \"${remote}\" \"${branch}\" >/dev/null 2>&1; then \
                    echo \"Deleting ${branch}\"; git branch -D \"${branch}\"; \
                fi; \
            done; \
        }; f"
        branch-upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
        brt = "!git for-each-ref refs/heads --color=always --sort -committerdate --format='%(HEAD)%(color:reset);%(color:yellow)%(refname:short)%(color:reset);%(contents:subject);%(color:green)(%(committerdate:relative))%(color:blue);<%(authorname)>' | column -t -s ';'"
        # git-cd (cd relative to Git repo/workspace root) defined in ~/.bash_aliases
        check-uncommitted-changes = "!f() { \
            git update-index -q --refresh && git diff-index --quiet HEAD --; \
        }; f"

        clean-merged-branches = "!f() { \
            gh pr list --limit 1000 --state all --author '@me' --json state,number,headRefName -q '[group_by(.headRefName)[] | select(all(.state == \"MERGED\" or .state == \"CLOSED\")) | .[0].headRefName].[]' | while read branch; do \
                if git show-ref --verify --quiet \"refs/heads/$branch\"; then \
                    echo \"Deleting local branch $branch...\"; \
                    worktree=$(git worktree list --porcelain -z | \
                        BRANCH=\"refs/heads/$branch\" perl -0ne ' \
                            if (/^worktree (.*?)\\0/) { $worktree=$1; next; }; \
                            if (/^branch @{[quotemeta($ENV{\"BRANCH\"})]}\\0/) { printf qq{%s\\nX}, $worktree; exit; \
                        }'); \
                    worktree=${worktree%??}; \
                    if [ -n \"$worktree\" ] && cd \"$worktree\"; then \
                        direnv reload >/dev/null 2>&1 || true; \
                        if [ \"${VIRTUAL_ENV:-}\" = openai-* ]; then \
                            VENV_DELETE=\"${VIRTUAL_ENV}\"; \
                        fi; \
                        git checkout --detach HEAD; \
                        cd \"$OLDPWD\"; \
                        if git worktree remove \"$worktree\"; then \
                            [ -n \"${VENV_DELETE:-}\" ] && rm -rf \"${VENV_DELETE}\"; git branch -D \"$branch\"; \
                        fi; \
                    else \
                        git branch -D \"$branch\"; \
                    fi; \
                fi; \
            done; \
        }; f"
        cb = current-branch
        cmb = clean-merged-branches
        co = checkout
        cp = cherry-pick
        cp-donate = "!f() { \
            set -eu; \
            if [ $# -lt 1 ]; then \
                echo Usage: git cp-donate BRANCH \\[CHERRY-PICK-ARGS\\] 1>&2; \
                return 1; \
            fi; \
            branch=$1; shift; \
            git checkout --ignore-other-worktrees \"$branch\"; git pull; \
            if [ $# -ge 1 ]; then git cherry-pick \"$@\"; fi; \
            git push; git checkout --ignore-other-worktrees -; git rebase --autosquash \"$branch\"; \
        }; f"
        cl = shallow-clone
        current-branch = branch --show-current
        d = diff
        dc = diff --cached
        dft = difftool
        fetchall = fetch --all --prune
        fixup = "!f() { if [[ $# -eq 0 ]]; then commit=$(git lg --color=always | fzf --ansi --height=40% --min-height=10 --layout=reverse | awk '{print $2}'); if git check-uncommitted-changes; then git rebase --interactive \"$commit\"; else git commit --fixup=\"$commit\"; fi; else git commit --fixup \"$@\"; fi; }; f"
        frm = "!f() { git ls-files -z \"$@\" | xargs -r -0 -n1 git rm -f && rm -f \"$@\"; }; f"
        gcm = "!f() { . ~/.config/git/gcm.sh; gcm \"$@\"; }; f"
        # helpconfig prints the man page section of `git-config` for only the
        # arguments passed to it, or for all entries in the section if the
        # argument doesn't contain a `.`.
        helpconfig = "!f() {\n  man git-config | col -b | perl -e '\n    # Read all lines from STDIN\n    my @lines = <STDIN>;\n    for my $i (0 .. $#lines) {\n      if ($lines[$i] =~ /^   Variables/) {\n        @lines = @lines[$i+1 .. $#lines];  # Keep only the lines after\n        last;\n      }\n    }\n    # Get the target setting from the arguments\n    foreach my $target (@ARGV) {\n      # Quote the target for regex safety\n      my $quoted = quotemeta($target);\n      # If the target contains a dot, require an exact word match; otherwise, match as a prefix (followed by a dot)\n      my $regex = ($target =~ /\\./) ? qr/\\b$quoted\\b/ : qr/\\b$quoted\\./;\n      my $found = 0;\n      for (my $i = 0; $i < @lines; $i++) {\n        # Look for a header line (starts with exactly 7 spaces) that matches our target regex\n        if ($lines[$i] =~ /^ {7}/ and $lines[$i] =~ /$regex/) {\n          # Go backward: include any contiguous header lines preceding this one\n          my $start = $i;\n          while ($start > 0 and $lines[$start-1] =~ /^ {7}/) { $start--; }\n          # Go forward: first include any header lines immediately after\n          my $end = $i;\n          while ($end+1 < @lines and $lines[$end+1] =~ /^ {7}/) { $end++; }\n          # Now, include subsequent lines until we hit another header line\n          while ($end+1 < @lines and $lines[$end+1] !~ /^ {7}/) { $end++; }\n          print for @lines[$start .. $end];\n          $found = 1;\n          last if $target =~ /\\./;\n        }\n      }\n      exit(1) if !$found;\n    }\n  ' \"$@\" | less;\n}; f"
        l = log --date-order --date=iso --graph --full-history --all --pretty=format:'%x08%x09%C(red)%h %C(cyan)%ad%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(bold blue)%aN%C(reset)%C(bold yellow)%d %C(reset)%s'
        lg = log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%an%d%Creset %s %Cgreen(%ar)%Creset' --date=relative
        ls-conflicts = diff --name-only --diff-filter=U
        # git-imerge: https://github.com/mhagger/git-imerge
        imd = "!f() { \
          (( $# > 0 )) || { echo Pass at least one branch 1>&2; return 1; }; \
          for branch in \"$@\"; do \
            git imerge merge \"$branch\" && git branch -d \"$branch\"; \
          done; \
        }; f"
        imd-tmp-branches = "!f () { \
            git checkout master && git branch | \
            grep --color=auto -E '^ *(gac|dropbox)-merge-([0-9]+)(\\.[0-9]+)? *$' | \
            while read branch; do git imd \"$branch\"; done; \
        }; f"
        md = "!f() { \
          (( $# > 0 )) || { echo Pass at least one branch 1>&2; return 1; }; \
          for branch in \"$@\"; do \
            git merge \"$branch\" && git branch -d \"$branch\"; \
          done; \
        }; f"
        md-tmp-branches = "!f () { \
            git checkout master && git branch | \
            grep --color=auto -E '^ *(gac|dropbox)-merge-([0-9]+)(\\.[0-9]+)? *$' | \
            while read branch; do git md \"$branch\"; done; \
        }; f"
        news = "!f () { \
            range=${1:-'@{1}..@{0}'}; \
                git log -p \"$range\"; \
        }; f"
        newslg = "!f () { \
            range=${1:-'@{1}..@{0}'}; \
                git log -p \"$range\" --graph --pretty=format:'%Cred%h%Creset %C(yellow)%an%d%Creset %s %Cgreen(%ar)%Creset' --date=relative; \
        }; f"
        pc = push-create
        pf = pushfwl
        pr-checks = "!f() { \
            gh pr checks \"$(git pr-current)\" | less; \
        }; f"
        pr-current = "!gh pr view --json number -q .number"
        pr-merge = "!gh pr comment $(git pr-current) --body /merge"
        pr-merge-skip-tests = "!gh pr comment $(git pr-current) --body /merge-skip-tests"
        pr-retry-failed = "!gh pr-retry-failed"
        push-allowed = "!f() { \
            branch=$(git symbolic-ref --short HEAD); \
            [[ -n \"$(git upstream-branch 2>/dev/null)\" ]] && [[ \"$(git config --get branch.\"$branch\".pushRemote)\" != no_push ]];  \
        }; f"
        push-create = "!f () { \
            local_branch=$(git name-rev --name-only HEAD); \
            remote=$(git remote show); \
            git push --set-upstream \"$remote\" \"$local_branch\"; \
        }; f"
        pushfwl = push --force-with-lease --force-if-includes
        rbb = rebase-base
        rbc = rebase --continue
        rbi = "!f() { if [[ $# -eq 0 ]]; then commit=$(git lg --color=always | fzf --ansi --height=40% --min-height=10 --layout=reverse | awk '{print $2}'); git rebase --interactive \"$commit\"; else git rebase --interactive \"$@\"; fi; }; f"
        rbs = rebase --skip
        rdf = "!f() { set -eo pipefail; cd \"$GIT_PREFIX\";  ~/.config/git/git-rdf \"$@\"; }; f"
        rebase-master = "!f() { \
            set -e; set -xv; \
            base=${1:-master}; \
            branch=$(git symbolic-ref --short HEAD); \
            stashed=$({ git stash | grep -q 'No local changes to save'; } || echo 1); \
            worktree_for_branch=$(git worktree-for-branch \"$base\"); \
            if [[ -n \"$worktree_for_branch\" ]]; then cd \"$worktree_for_branch\"; else git checkout \"$base\"; fi; \
            git pull; \
            if git push-allowed; then git pushfwl; fi; \
            if [[ -n \"$worktree_for_branch\" ]]; then cd -; else git checkout -; fi; \
            if false && [[ -n \"$(git upstream-branch 2>/dev/null)\" ]]; then git pull; fi; \
            git rebase --onto \"$base\" $(git merge-base HEAD \"$base\"); \
            [[ -n \"$stashed\" ]] && git stash pop; \
        }; f"
        recent = branch --sort=-committerdate --format='%(color:blue bold)%(align:20,left)%(refname:short)%(end) %(color:red)%(align:35,middle)%(objectname:short) %(color:white)%(committerdate:iso)%(end) %(color:normal no-bold)%(subject)'
        reflg = reflog --date=relative
        regen-commit-msg = "!f() { if ! git diff --quiet --exit-code; then echo Commit or stage uncommitted changes first 1>&2; return 1; fi; git reset --soft 'HEAD~1'; git commit; }; f"
        reword = commit --amend --only
        root = rev-parse --show-toplevel
        rw = reword
        clone-shallow = shallow-clone
        shallow-clone = clone --depth=1
        st = status
        staged = "!f() { set -eo pipefail; cd \"$GIT_PREFIX\";  git diff --cached --name-only \"$@\" | git rdf \"$@\"; }; f"
        sw = switch
        unmerged = "!f() { set -eo pipefail; cd \"$GIT_PREFIX\";  git diff --name-only --diff-filter=U \"$@\" | git rdf \"$@\"; }; f"
        unstaged = "!f() { set -eo pipefail; cd \"$GIT_PREFIX\";  git diff --name-only \"$@\" | git rdf \"$@\"; }; f"
        untracked = "!f() { set -eo pipefail; cd \"$GIT_PREFIX\";  git ls-files --others --exclude-standard \"$@\" | git rdf \"$@\"; }; f"
        upstream-branch = rev-parse --abbrev-ref --symbolic-full-name @{u}
        worktree-for-branch = "!f() { \
            (( $# == 1 )) || { echo Usage: git worktree-for-branch BRANCH; return 1; }; \
            branch=$1; \
            worktree_info=$(git worktree list --porcelain); \
            branch_in_worktree=$(printf '%s' \"$worktree_info\" | grep -B 2 '^branch refs/heads/'\"$branch\"'$' || true); \
            if [[ -n \"$branch_in_worktree\" ]]; then sed -nE 's/^worktree (.*)$/\\1/p' <<< \"$branch_in_worktree\"; else exit 1; fi; \
        }; f"
        # Print the root of the main worktree in this repository.
        # One extra trailing newline is always added to the output so that the
        # shell prompt always starts on a new line. You can use this shell trick
        # to get the root without a trailing newline (from
        # https://www.etalabs.net/sh_tricks.html):
        #
        # ```
        # root=$(git worktree-main-top-level; printf 'X')
        # root=${root%??}
        # ```
        worktree-main-top-level = "!f() { \
                git worktree list --porcelain -z | \
                        perl -0ne 'print \"$1\\n\" and exit if /worktree ([^\\0]+)/'; \
        }; f"
[user]
        name = Robert Irelan
        email = rirelan@gmail.com
[merge]
        autoStash = true
        conflictStyle = zdiff3
        tool = vimdiff
[checkout]
        workers = 16
[credential]
        helper = cache
[color]
        ui = true
[core]
        pager = delta
        autocrlf = input
        untrackedCache = true
        quotePath = false
        precomposeunicode = true
        fsmonitor = true
        # Disable global excludes file - this has caused issues for me in other
        # Git repositories. Instead, look at template/.gitignore for a global
        # file to initialize new repositories with.
        excludesFile = /dev/null
[diff]
        submodule = log
        colorMoved = default
[diff "lisp"]
      xfuncname = "^(\\(.*)$"
[diff "scpt"]
        textconv = osadecompile
        binary = true
[diff "rstats"]
      xfuncname = "^([a-zA-z.]+ <- function.*)$"
[diff "texinfo"]
# from http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=blob;f=.gitattributes;h=c3b2926c78c939d94358cc63d051a70d38cfea5d;hb=HEAD
      xfuncname = "^@node[ \t][ \t]*\\([^,][^,]*\\)"
[diff "orgmode"]
      xfuncname = "^(\\*+.*)$"
[diff "rust"] # Thanks to csabahenk
      xfuncname = "^[ \t]*(pub)?[ \t]*((fn|struct|enum|impl|trait|mod)[^;]*)$"
[diff "exif"]
      binary = true
# sudo apt-get install libimage-exiftool-perl
      textconv = exiftool
[diff "pdf"]
      textconv = pdftotext-stdout
[diff "json"]
      textconv = gron
[difftool]
        prompt = false
[difftool "difftastic"]
        cmd = difft "$LOCAL" "$REMOTE"
[help]
        autocorrect = 1
[interactive]
        diffFilter = delta --color-only
[man]
        viewer = mostman
[man "mostman"]
        cmd = eval "$(TERMINFO=~/.terminfo/ infocmp mostlike >/dev/null 2>&1 && echo TERMINFO=~/.terminfo/ TERM=mostlike) man"
[color "diff"]
        whitespace = red reverse
[pager]
        difftool = true
[pull]
        rebase = merges
[push]
        default = simple
# Keybase doesn't support this - need to see how to fix
#        useForceIfIncludes = true
[init]
        templatedir = ~/.config/git/template
[rebase]
        autoStash = true
        autoSquash = true
[rerere]
        enabled = true
[ssh]
        # Speed up detection of SSH variant - we always use OpenSSH on Unix-like
        variant = ssh
[status]
        submoduleSummary = true
[multidiff]
        tool = meld-multidiff
[rebase]
        autosquash = true
[commit]
        gpgsign = true
[tag]
        gpgsign = true
[gpg]
        format = ssh
[gpg "ssh"]
        allowedSignersFile = ~/.ssh/allowed_signers
[include]
        path = config.signing
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[delta]
        hyperlinks = true
        hyperlinks-file-link-format = "mvim://open?url=file://{path}&line={line}"
        navigate = true    # use n and N to move between diff sections
